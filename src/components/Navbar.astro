---
// Navigation Component
// Responsive navigation bar with mobile menu support and dynamic dropdowns
const currentPath = Astro.url.pathname;

const navItems = [
  { name: 'Home', href: '/' },
  { name: 'About', href: '/about', hasDropdown: true },
  { name: 'Skills', href: '/skills', hasDropdown: true },
  { name: 'Experience', href: '/experience' },
  { name: 'Research', href: '/research', hasDropdown: true },
  { name: 'Projects', href: '/projects', hasDropdown: true },
  { name: 'Contact', href: '/contact' },
];
---

<nav class="bg-navy-900 shadow-lg sticky top-0 z-50 border-b border-navy-800">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between h-16">
      <!-- Logo/Name -->
      <div class="flex items-center">
        <a href="/" class="text-xl font-bold text-primary-100 hover:text-accent-400 transition-colors">
          Jawand Singh
        </a>
      </div>
      
      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8">
        {navItems.map((item) => (
          <div class="relative group">
            <a
              href={item.href}
              class={`px-3 py-2 rounded-md text-sm font-medium transition-colors flex items-center ${
                currentPath === item.href
                  ? 'text-accent-400 bg-navy-800'
                  : 'text-primary-300 hover:text-accent-400 hover:bg-navy-800'
              }`}
              data-nav-item={item.hasDropdown ? 'true' : 'false'}
              data-page-path={item.href}
            >
              {item.name}
              {item.hasDropdown && (
                <svg class="ml-1 h-4 w-4 transition-transform group-hover:rotate-180" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
              )}
            </a>
            
            {item.hasDropdown && (
              <div class="absolute left-0 mt-2 w-48 bg-navy-800 rounded-md shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50 border border-navy-700"
                   data-dropdown={item.href}>
                <div class="py-1" data-dropdown-content>
                  <!-- Dynamic content will be populated by JavaScript -->
                  <div class="px-4 py-2 text-sm text-primary-300 italic">Loading...</div>
                </div>
              </div>
            )}
          </div>
        ))}
      </div>
      
      <!-- Mobile menu button -->
      <div class="md:hidden flex items-center">
        <button
          id="mobile-menu-button"
          class="inline-flex items-center justify-center p-2 rounded-md text-primary-300 hover:text-accent-400 hover:bg-navy-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-accent-500"
          aria-controls="mobile-menu"
          aria-expanded="false"
        >
          <span class="sr-only">Open main menu</span>
          <!-- Menu icon -->
          <svg class="block h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
          <!-- Close icon -->
          <svg class="hidden h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div class="md:hidden hidden" id="mobile-menu">
    <div class="px-2 pt-2 pb-3 space-y-1 bg-navy-900 border-t border-navy-800">
      {navItems.map((item) => (
        <div>
          <a
            href={item.href}
            class={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${
              currentPath === item.href
                ? 'text-accent-400 bg-navy-800'
                : 'text-primary-300 hover:text-accent-400 hover:bg-navy-800'
            }`}
            data-mobile-nav-item={item.hasDropdown ? 'true' : 'false'}
            data-page-path={item.href}
          >
            {item.name}
          </a>
          
          {item.hasDropdown && (
            <div class="ml-4 mt-1 space-y-1" data-mobile-dropdown={item.href}>
              <!-- Dynamic content will be populated by JavaScript -->
            </div>
          )}
        </div>
      ))}
    </div>
  </div>
</nav>

<script>
  // Mobile menu toggle functionality
  function initMobileMenu() {
    const button = document.getElementById('mobile-menu-button');
    const menu = document.getElementById('mobile-menu');
    const menuIcon = button?.querySelector('svg:first-child');
    const closeIcon = button?.querySelector('svg:last-child');
    
    button?.addEventListener('click', () => {
      const isOpen = !menu?.classList.contains('hidden');
      
      menu?.classList.toggle('hidden', isOpen);
      menuIcon?.classList.toggle('hidden', !isOpen);
      closeIcon?.classList.toggle('hidden', isOpen);
      button.setAttribute('aria-expanded', (!isOpen).toString());
    });
  }

  // Dynamic dropdown functionality
  function initDynamicDropdowns() {
    // Define section mappings for each page
    const pageSections = {
      '/about': [
        { text: 'Education', id: 'education' },
        { text: 'Honors & Awards', id: 'honors-awards' }
      ],
      '/skills': [
        { text: 'Programming Languages', id: 'programming-languages' },
        { text: 'Tools & Technologies', id: 'tools-technologies' },
        { text: 'Certifications', id: 'certifications' }
      ],
      '/research': [
        { text: 'Current Research Projects', id: 'current-research-projects' },
        { text: 'Past Research Projects', id: 'past-research-projects' }
      ],
      '/projects': [
        { text: 'Featured Projects', id: 'featured-projects' },
        { text: 'All Projects', id: 'all-projects' }
      ]
    };
    
    // Generate a URL-friendly ID from text
    function generateId(text) {
      return text.toLowerCase()
        .replace(/[^\w\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .trim();
    }
    
    // Create dropdown item
    function createDropdownItem(section, pagePath, isMobile = false) {
      const link = document.createElement('a');
      link.href = `${pagePath}#${section.id}`;
      link.textContent = section.text;
      
      if (isMobile) {
        link.className = 'block px-3 py-1 text-sm text-primary-300 hover:text-accent-400 hover:bg-navy-800 rounded';
      } else {
        link.className = 'block px-4 py-2 text-sm text-primary-300 hover:text-accent-400 hover:bg-navy-700 transition-colors';
      }
      
      // Handle navigation
      link.addEventListener('click', (e) => {
        const currentPath = window.location.pathname;
        
        // If we're already on the target page, prevent default and scroll smoothly
        if (currentPath === pagePath) {
          e.preventDefault();
          const element = document.getElementById(section.id);
          if (element) {
            // Calculate offset for sticky navbar (64px height + some padding)
            const navbarHeight = 80;
            const elementPosition = element.getBoundingClientRect().top + window.pageYOffset;
            const offsetPosition = elementPosition - navbarHeight;
            
            window.scrollTo({
              top: offsetPosition,
              behavior: 'smooth'
            });
          }
          
          // Close mobile menu if open
          const mobileMenu = document.getElementById('mobile-menu');
          if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
            mobileMenu.classList.add('hidden');
            const button = document.getElementById('mobile-menu-button');
            const menuIcon = button?.querySelector('svg:first-child');
            const closeIcon = button?.querySelector('svg:last-child');
            menuIcon?.classList.remove('hidden');
            closeIcon?.classList.add('hidden');
            button?.setAttribute('aria-expanded', 'false');
          }
        }
        // Otherwise, let the link navigate normally (will go to page and scroll to section)
      });
      
      return link;
    }
    
    // Populate all dropdowns
    function populateAllDropdowns() {
      Object.entries(pageSections).forEach(([pagePath, sections]) => {
        // Desktop dropdowns
        const desktopDropdown = document.querySelector(`[data-dropdown="${pagePath}"] [data-dropdown-content]`);
        if (desktopDropdown) {
          desktopDropdown.innerHTML = '';
          sections.forEach(section => {
            desktopDropdown.appendChild(createDropdownItem(section, pagePath));
          });
        }
        
        // Mobile dropdowns
        const mobileDropdown = document.querySelector(`[data-mobile-dropdown="${pagePath}"]`);
        if (mobileDropdown) {
          mobileDropdown.innerHTML = '';
          sections.forEach(section => {
            mobileDropdown.appendChild(createDropdownItem(section, pagePath, true));
          });
        }
      });
    }
    
    // Auto-update IDs on current page if they don't exist
    function updateCurrentPageIds() {
      const currentPath = window.location.pathname;
      const sections = pageSections[currentPath];
      
      if (sections) {
        sections.forEach(section => {
          const heading = Array.from(document.querySelectorAll('h2')).find(h => 
            generateId(h.textContent?.trim() || '') === section.id
          );
          
          if (heading && !heading.id) {
            heading.id = section.id;
          }
        });
      }
    }
    
    // Handle smooth scrolling on page load if there's a hash
    function handleHashOnLoad() {
      const hash = window.location.hash;
      if (hash) {
        // Prevent immediate jump by temporarily removing hash
        history.replaceState('', document.title, window.location.pathname + window.location.search);
        
        setTimeout(() => {
          const element = document.getElementById(hash.substring(1));
          if (element) {
            // Calculate offset for sticky navbar (64px height + some padding)
            const navbarHeight = 80;
            const elementPosition = element.getBoundingClientRect().top + window.pageYOffset;
            const offsetPosition = elementPosition - navbarHeight;
            
            window.scrollTo({
              top: offsetPosition,
              behavior: 'smooth'
            });
          }
          // Restore hash to URL
          history.replaceState('', document.title, window.location.pathname + window.location.search + hash);
        }, 100);
      }
    }
    
    // Initialize dropdowns immediately
    populateAllDropdowns();
    
    // Update current page IDs after content loads
    setTimeout(() => {
      updateCurrentPageIds();
      handleHashOnLoad();
    }, 100);
  }
  
  // Initialize on page load
  document.addEventListener('DOMContentLoaded', () => {
    initMobileMenu();
    initDynamicDropdowns();
  });
  
  // Re-initialize on navigation (for SPA-like behavior)
  document.addEventListener('astro:page-load', () => {
    initMobileMenu();
    initDynamicDropdowns();
  });
</script>


